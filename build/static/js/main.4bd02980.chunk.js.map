{"version":3,"sources":["config/fire.js","Login.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","login","bind","handleChange","signup","state","email","password","e","preventDefault","auth","signInWithEmailAndPassword","this","then","u","console","log","catch","err","createUserWithEmailAndPassword","setState","target","name","value","class","id","type","placeholder","onChange","data-error","data-success","onClick","Component","Home","signOut","logout","App","user","authListener","onAuthStateChanged","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAceA,E,OAFFC,EAASC,cAVD,CACnBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,gBACnBC,MAAO,+C,gBCgFMC,E,kDAnFf,WAAYC,GACX,IAAD,8BACI,cAAMA,IACDC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBACd,EAAKG,MAAM,CACPC,MAAQ,GACRC,SAAW,IAPnB,E,kDAUMC,GACFA,EAAEC,iBACFpB,EAAKqB,OAAOC,2BAA2BC,KAAKP,MAAMC,MAAMM,KAAKP,MAAME,UAAUM,MAAK,SAACC,GAC/EC,QAAQC,IAAIF,MACbG,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,6BAGbV,GACHA,EAAEC,iBACFpB,EAAKqB,OAAOS,+BAA+BP,KAAKP,MAAMC,MAAMM,KAAKP,MAAME,UAAUM,MAAK,SAACC,GACnFC,QAAQC,IAAIF,MACbG,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,mCAGPV,GACTI,KAAKQ,SAAL,eACKZ,EAAEa,OAAOC,KAAQd,EAAEa,OAAOE,U,+BAK/B,OAGJ,yBAAKC,MAAM,OACL,yBAAKA,MAAM,uCACT,yBAAKA,MAAM,2BACT,0BAAMA,MAAM,cAAZ,mBAEF,yBAAKA,MAAM,eAEX,8BAER,2BAAOC,GAAG,QAAQC,KAAK,QAAQF,MAAM,WAAWF,KAAK,QACrCK,YAAY,sBACZC,SAAUhB,KAAKT,aACfoB,MAAOX,KAAKP,MAAMC,QAElC,0BAAMkB,MAAM,cAAcK,aAAW,QAAQC,eAAa,UAE1D,2BAAOL,GAAG,WAAWC,KAAK,WAAWF,MAAM,WAAWF,KAAK,WAC3CM,SAAUhB,KAAKT,aACfwB,YAAY,iBACZJ,MAAOX,KAAKP,MAAME,WAIlC,4BAAQiB,MAAM,8CAA8CE,KAAK,SAASK,QAASnB,KAAKX,MAAOqB,KAAK,UAApG,SAGE,0CAEA,4BAAQS,QAASnB,KAAKR,OAAQoB,MAAM,mDAAmDE,KAAK,SAASJ,KAAK,UAA1G,kB,GAlEkBU,aCkCLC,E,kDAlCf,WAAYjC,GACX,IAAD,8BACI,cAAMA,IACDK,MAAM,GAFf,E,qDAOIhB,EAAKqB,OAAOwB,Y,+BAIZ,OAEI,mCAAQ,6BACR,yBAAKV,MAAM,kCACT,wBAAIC,GAAG,aAAaD,MAAM,8BACxB,4BAAI,4BAAQA,MAAM,yCAAyCO,QAASnB,KAAKuB,QAArE,UAA4F,8CAItG,yBAAKX,MAAM,OACX,yBAAKA,MAAM,oBACT,0BAAMA,MAAM,cAAZ,sN,GAxBWQ,aCmCJI,E,kDAhCb,WAAYpC,GACX,IAAD,8BACE,cAAMA,IACDK,MAAM,CACTgC,KAAO,IAHX,E,gEAQEzB,KAAK0B,iB,qCAEQ,IAAD,OACZjD,EAAKqB,OAAO6B,oBAAmB,SAACF,GAC3BA,EAED,EAAKjB,SAAS,CAACiB,SAGf,EAAKjB,SAAS,CAACiB,KAAO,Y,+BAM1B,OACE,yBAAKG,UAAU,OACZ5B,KAAKP,MAAMgC,KAAQ,kBAAC,EAAD,MAAY,kBAAC,EAAD,W,GA3BtBL,aCMES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.4bd02980.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAB_4MwB070SOSSa6dCbHe4P8w12WG3uKk\",\n  authDomain: \"surfxm-2020.firebaseapp.com\",\n  databaseURL: \"https://surfxm-2020.firebaseio.com\",\n  projectId: \"surfxm-2020\",\n  storageBucket: \"surfxm-2020.appspot.com\",\n  messagingSenderId: \"1051957710307\",\n  appId: \"1:1051957710307:web:56d7494609faf4bc4c24d6\"\n};\n\nconst fire = firebase.initializeApp(firebaseConfig);\n\nexport default fire;","import React , { Component } from \"react\";\nimport fire from \"./config/fire\";\nimport 'materialize-css';\nimport 'materialize-css/dist/css/materialize.min.css';\n\nclass Login extends Component{\nconstructor(props)\n{\n    super(props);\n    this.login = this.login.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.signup = this.signup.bind(this);\n    this.state={\n        email : \"\",\n        password : \"\"\n    }\n}\nlogin(e){\n    e.preventDefault();\n    fire.auth().signInWithEmailAndPassword(this.state.email,this.state.password).then((u)=>{\n        console.log(u)\n    }).catch((err)=>{\n        console.log(err);\n    })\n}\nsignup(e){\n    e.preventDefault();\n    fire.auth().createUserWithEmailAndPassword(this.state.email,this.state.password).then((u)=>{\n        console.log(u)\n    }).catch((err)=>{\n        console.log(err);\n    })\n}\nhandleChange(e){\n    this.setState({\n        [e.target.name] : e.target.value\n    })\n}\nrender()\n{\n    return(\n\n       \n<div class=\"row\">\n      <div class=\"card deep-purple darken-4 z-depth-5\">\n        <div class=\"card-content white-text\">\n          <span class=\"card-title\">Admin - Surfxm</span>\n        </div>\n        <div class=\"card-action\">\n\n        <form>\n\n<input id=\"email\" type=\"email\" class=\"validate\" name=\"email\"\n                placeholder=\"Enter email address\"\n                onChange={this.handleChange}\n                value={this.state.email}/>\n          \n<span class=\"helper-text\" data-error=\"wrong\" data-success=\"Great\"></span>\n          \n<input id=\"password\" type=\"password\" class=\"validate\" name=\"password\"\n                onChange={this.handleChange}\n                placeholder=\"Enter password\"\n                value={this.state.password}/>\n\n\n\n<button class=\"btn waves-effect waves-light green accent-3\" type=\"submit\" onClick={this.login} name=\"action\">Login\n  </button>\n\n  <span>&nbsp;&nbsp;</span>\n\n  <button onClick={this.signup} class=\"btn waves-effect waves-light light-blue darken-2\" type=\"submit\" name=\"action\">SignUp\n  </button>\n        \n                \n            </form>\n          \n        </div>\n      </div>\n  </div>\n\n\n\n            \n\n        \n    )\n}\n}\nexport default Login;","import React , { Component } from \"react\";\nimport fire from \"./config/fire\";\nimport 'materialize-css';\n\nclass Home extends Component{\nconstructor(props)\n{\n    super(props)\n    this.state={\n        \n    }\n}\nlogout(){\n    fire.auth().signOut();\n}\nrender()\n{\n    return(\n     \n        <div>   <nav>\n        <div class=\"nav-wrapper blue-grey darken-4\">\n          <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n            <li><button class=\"waves-effect waves-light btn-small red\" onClick={this.logout}>Logout</button><span>&nbsp;&nbsp;</span></li>\n          </ul>\n        </div>\n      </nav>\n      <div class=\"row\">\n      <div class=\"card-panel black\">\n        <span class=\"white-text\">I am a very simple card. I am good at containing small bits of information.\n        I am convenient because I require little markup to use effectively. I am similar to what is called a panel in other frameworks.\n        </span>\n      </div>\n    \n  </div>\n            \n        </div>\n    )\n}\n}\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport 'materialize-css';\nimport fire from './config/fire';\nimport Login from './Login'\nimport Home from './Home'\nclass App extends Component{\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      user : {}\n    }\n  }\n  componentDidMount()\n  {\n    this.authListener();\n  }\n  authListener(){\n    fire.auth().onAuthStateChanged((user)=>{\n      if(user)\n      {\n        this.setState({user})\n      }\n      else{\n        this.setState({user : null})\n      }\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        {this.state.user ? (<Home/>) : (<Login/>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport 'materialize-css';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}